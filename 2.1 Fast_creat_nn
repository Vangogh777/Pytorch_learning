import torch
from torch.autograd  import Variable
import numpy as np
import torch.nn.functional as F
import matplotlib.pyplot as plt

n_data = torch.ones(100,2)
x0 = torch.normal(2*n_data,1)
y0 = torch.zeros(100)
x1 = torch.normal(-2*n_data,1)
y1 = torch.ones(100)

x = torch.cat((x0,x1),0).type(torch.FloatTensor)
y = torch.cat((y0,y1),).type(torch.LongTensor)

x,y = Variable(x),Variable(y)
## 数据显示
# plt.scatter(x.data.numpy(),y.data.numpy())
# plt.show()
# plt.scatter(x.data.numpy()[:, 0], x.data.numpy()[:, 1], c=y.data.numpy(), s=100, lw=0, cmap='RdYlGn')
#
# plt.show()

#method1
class Net(torch.nn.Module):
    def __init__(self,n_features,n_hidden,n_output):
        super(Net,self).__init__() #继承net
        #隐藏层 ：输入->隐藏
        self.hidden = torch.nn.Linear(n_features,n_hidden)
        #预测： 隐藏层->结果输出
        self.predict = torch.nn.Linear(n_hidden,n_output)

    def forward(self,x):
        #搭建神经网络
        x = F.relu(self.hidden(x)) #利用激励函数激活
        x = self.predict(x)
        return x


#method2
net2 = torch.nn.Sequential(
    torch.nn.Linear(2,10),
    torch.nn.ReLU(),
    torch.nn.Linear(10,2)
)


if __name__=='__main__':
    net1 = Net(2,10,2)
    print(net1)
    print(net2)
