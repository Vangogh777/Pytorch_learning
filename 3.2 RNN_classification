import torch
from torch import nn
from torch.autograd import Variable

import torchvision.datasets as dsets
import torchvision.transforms as transforms
import matplotlib.pyplot as plt


#RNN 循环神经网络

#超参数设置
EPOCH = 1               # 批处理几次
BATCH_SIZE = 64         # 批训练数量
TIME_STEP = 28          # rnn time step /image height    (时序长)
INPUT_SIZE = 28         # rnn 输入尺寸 图像宽度             (embedding尺寸)
LR = 0.01               # 学习率
DOWNLOAD_MNIST = False   # 设置数据集下载

train_data = dsets.MNIST(
    root='./mnist',
    train=True,
    transform=transforms.ToTensor(),
    download=DOWNLOAD_MNIST
)
train_loader = torch.utils.data.DataLoader(
    dataset=train_data,
    batch_size=BATCH_SIZE,
    shuffle=True
)

test_data = dsets.MNIST(root='./mnist',train=False, transform=transforms.ToTensor())

test_x = test_data.test_data.type(torch.FloatTensor)[:2000]/255.
#torch.unsqueeze: 对数据维度进行扩充
#torch.squeeze: 对数据进行压缩
#test_y = test_data.targets[:2000]
test_y = test_data.test_labels.numpy()[:2000]


class RNN(nn.Module):
    def __init__(self):
        super(RNN, self).__init__()
        self.rnn = nn.LSTM(
            input_size=INPUT_SIZE,
            hidden_size=64,
            num_layers=1,
            #cell细胞 （隐藏层？）      num_layer = h(t)的层数
            batch_first=True,#batch 放到第一个维度

        )
        self.out = nn.Linear(64,10)

    def forward(self,x):
        #x = x.view(-1,28,28)
        r_out,(h_n, h_C )= self.rnn(x,None)
        out = self.out(r_out[:,-1,:])
        return out


rnn = RNN()
print(rnn)
optimiter = torch.optim.Adam(rnn.parameters(),lr=LR)
loss_func = nn.CrossEntropyLoss()       #独热编码

for epoch in range(EPOCH):
    for step,(b_x,b_y) in enumerate(train_loader):
        # b_x = Variable(x.view(-1,28,28))
        # b_y = Variable(y)
        b_x = b_x.view(-1,28,28)

        output = rnn(b_x)
        loss = loss_func(output,b_y)
        optimiter.zero_grad()
        loss.backward()
        optimiter.step()

        if step %50==0:
            test_output = rnn(test_x)
            pred_y = torch.max(test_output,1)[1].data.numpy()
            #accuracy = float((pred_y == test_y).astype(int).sum())/float(test_y.size())
            accuracy = float((pred_y == test_y).astype(int).sum()) / float(test_y.size)
            print('Epoch:',epoch,'| train loss:%.4f'%loss.item(),'|test accracy:%.4f'%accuracy)

test_output = rnn(test_x[:10].view(-1,28,28))
pred_y = torch.max(test_output,1)[1].data.numpy().squeeze()
print(pred_y,'prediction number')
print(test_y[:10],'real number')
