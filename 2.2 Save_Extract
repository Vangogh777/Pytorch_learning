import torch
from torch.autograd  import Variable
import numpy as np
import torch.nn.functional as F
import matplotlib.pyplot as plt

x = torch.unsqueeze(torch.linspace(-1,1,100),dim=1)
y = x.pow(2)+0.2*torch.rand(x.size())

#x,y = Variable(x),Variable(y)
## 数据显示
# plt.scatter(x.data.numpy(),y.data.numpy())
# plt.show()


# class Net(torch.nn.Module):
#     def __init__(self,n_features,n_hidden,n_output):
#         super(Net,self).__init__() #继承net
#         #隐藏层 ：输入->隐藏
#         self.hidden = torch.nn.Linear(n_features,n_hidden)
#         #预测： 隐藏层->结果输出
#         self.predict = torch.nn.Linear(n_hidden,n_output)
#
#     def forward(self,x):
#         #搭建神经网络
#         x = F.relu(self.hidden(x)) #利用激励函数激活
#         x = self.predict(x)
#         return x



def save():
    # net1 = Net(1,10,1) 使用类定义
    # 下面的这种方式是快速定义
    net1 = torch.nn.Sequential(
        torch.nn.Linear(1,10),
        torch.nn.ReLU(),
        torch.nn.Linear(10,1)
    )
    #利用优化器优化神经网络
    optimizer = torch.optim.SGD(net1.parameters(),lr=0.5)
    loss_func = torch.nn.MSELoss()

    for t in range(100):
        prediction = net1(x)
        loss = loss_func(prediction,y)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

    plt.figure(1,figsize=(10,3))
    plt.subplot(131)
    plt.title('net1')
    plt.scatter(x.data.numpy(),y.data.numpy())
    plt.plot(x.data.numpy(), prediction.data.numpy(),'r-',lw=5)

    #保存网络 与保存参数
    torch.save(net1, 'net.pkl')  # entire_net
    torch.save(net1.state_dict(), 'net_params.pkl')  # 参数

def restore_net():
    net2 = torch.load('net.pkl')
    prediction=net2(x)
    # plot result
    plt.subplot(132)
    plt.title('Net2')
    plt.scatter(x.data.numpy(), y.data.numpy())
    plt.plot(x.data.numpy(), prediction.data.numpy(), 'r-', lw=5)

def restore_params():
    net3 = torch.nn.Sequential(
        torch.nn.Linear(1, 10),
        torch.nn.ReLU(),
        torch.nn.Linear(10, 1)
    )

    # copy net1's parameters into net3
    # net3 = torch.nn.DataParallel(net3)


    net3.load_state_dict(torch.load('net_params.pkl'))
    prediction = net3(x)

    # plot result
    plt.subplot(133)
    plt.title('Net3')
    plt.scatter(x.data.numpy(), y.data.numpy())
    plt.plot(x.data.numpy(), prediction.data.numpy(), 'r-', lw=5)




save()
restore_net()
restore_params()
plt.show()

